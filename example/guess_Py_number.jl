include("../src/LowRankSOS.jl")
using .LowRankSOS
# import the constructions of the example varieties
include("toric_variety/Veronese.jl")
# import other modules
using Formatting

# set the experiment parameters
const VAL_TOL = 1e-8
const REL_MAX_ITER = 20
const flag_resolve = false
NUM_RUN = 1000
DEG = 4
DIM = 2

# check the command line arguments
num_args = length(ARGS)
if num_args > 0
    DIM = parse(Int,ARGS[1])
end
if num_args > 1
    DEG = parse(Int,ARGS[2])
end
if num_args > 2
    NUM_RUN = parse(Int,ARGS[3])
end
if num_args > 3
    error("Too many command line arguments.")
end

# define the main function of guessing Pythagoras number for Veronese varieties
function guess_Pythagoras_number(
        dim::Int,
        deg::Int,
        num_run::Int
    )
    # build the coordinate ring of the Veronese variety
    coord_ring = build_ring_Veronese(dim, deg)
    # find an upper bound of the Pythagoras number
    upper_bound = get_BP_bound(coord_ring)
    # start with some lower bound of the Pythagoras number
    lower_bound = dim + 1
    Py_num = lower_bound
    # start the main loop for checking the Pythagoras number
    flag_success = false
    for Py_num in lower_bound:upper_bound
        println("Test the Pythagoras number ", Py_num)
        flag_success = true
        for idx_run = 1:num_run
            printfmtln("\nRun the test {} for randomly generated targets and starting points...", idx_run)
            # choose randomly a target (generated by a random tuple of linear forms with full rank)
            tuple_random = rand(coord_ring.dim1*coord_ring.dim1)
            target_sos = get_sos(tuple_random, coord_ring)
            target_sos ./= norm(target_sos)
            # choose randomly a starting point
            tuple_start = rand(Py_num*coord_ring.dim1)
            tuple_start ./= norm(tuple_start)
            # solve the problem and record the time
            time_start = time()
            vec_sol, val_res, flag_conv = call_NLopt(Py_num, target_sos, coord_ring, tuple_linear_forms=tuple_start, num_max_eval=coord_ring.dim1*REL_MAX_ITER, print_level=0) 
            time_end = time()
            # check the optimal value
            if val_res > VAL_TOL && flag_conv
                # check the optimality conditions
                vec_sos = get_sos(vec_sol, coord_ring)
                mat_Jac = build_Jac_mat(vec_sol, coord_ring)
                vec_grad = 2*mat_Jac'*(vec_sos-target_sos)
                mat_Hess = build_Hess_mat(Py_num, vec_sol, target_sos, coord_ring)
                printfmtln("Stationary point encountered with grad norm = {:<10.4e} and the min Hessian eigenval = {:<10.4e}",
                           norm(vec_grad), minimum(eigen(mat_Hess).values))
                # start the adaptive moves along a direct path connecting the quadrics
                if flag_resolve
                    println("Re-solve the problem using the direct path method...")
                    vec_sol, val_res = move_direct_path(Py_num, target_sos, coord_ring, 
                                                        tuple_linear_forms=tuple_start, 
                                                        str_descent_method="lBFGS-NLopt", 
                                                        print_level=1, 
                                                        val_threshold=VAL_TOL*max(1.0,norm(target_sos)))
                    vec_sos = get_sos(vec_sol, coord_ring)
                    if norm(vec_sos-target_sos) > VAL_TOL
                        flag_success = false
                        break
                    end
                else
                    flag_success = false
                    break
                end
            end
        end
        # check if any spurious stationary point is encountered
        if flag_success
            printfmtln("\n\n\nThe Pythagoras number for {}-dimensional degree-{} Veronese variety is conjectured to be {}.",
                      dim, deg, Py_num)
            return Py_num
        end
        println("\n\n\n")
    end
end

guess_Pythagoras_number(DIM, DEG, NUM_RUN)


