function exec_single(
        coord_ring::CoordinateRing2,
        num_square::Int
    )
    # choose randomly a target (generated by a random tuple of linear forms with full rank)
    tuple_random = rand(coord_ring.dim1*coord_ring.dim1)
    target_sos = get_sos(tuple_random, coord_ring)
    println("Run different local optimization methods with ", num_square, " squares...")
    # choose randomly a starting point
    tuple_start = rand(num_square*coord_ring.dim1)
    # run the line search method
    solve_gradient_descent(num_square, target_sos, coord_ring, tuple_linear_forms=tuple_start, print_level=1)
    solve_BFGS_descent(num_square, target_sos, coord_ring, tuple_linear_forms=tuple_start, print_level=1)
    solve_lBFGS_descent(num_square, target_sos, coord_ring, tuple_linear_forms=tuple_start, print_level=1)
    solve_CG_descent(num_square, target_sos, coord_ring, tuple_linear_forms=tuple_start, print_level=1, str_CG_update="PolakRibiere")
    solve_CG_descent(num_square, target_sos, coord_ring, tuple_linear_forms=tuple_start, print_level=1, str_CG_update="HagerZhang")
    solve_CG_push_descent(num_square, target_sos, coord_ring, tuple_linear_forms=tuple_start, print_level=1)
    solve_CG_push_descent(num_square, target_sos, coord_ring, 1, tuple_linear_forms=tuple_start, print_level=1)
    solve_CG_push_descent(num_square, target_sos, coord_ring, 0, tuple_linear_forms=tuple_start, print_level=1)
    # run the direct path algorithm
    move_direct_path(num_square, target_sos, coord_ring, tuple_linear_forms=tuple_start, print_level=1, str_descent_method="CG")
    move_direct_path(num_square, target_sos, coord_ring, tuple_linear_forms=tuple_start, print_level=1, str_descent_method="lBFGS")
    # call the external solver for comparison
    call_NLopt(num_square, target_sos, coord_ring, tuple_linear_forms=tuple_start, print_level=1)
end
